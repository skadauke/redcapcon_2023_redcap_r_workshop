---
title: "Advanced API Tasks REDCap using REDCapR"
format: html
editor: visual
---

To start this final section, we will upload data using [REDCapR](https://ouhscbbmc.github.io/REDCapR). Let's install with the newest version of REDCapR from GitHub.

```{r}
if (packageVersion("REDCapR") < "1.1.9005") {
  install.packages("remotes")
  remotes::install_github("OuhscBbmc/REDCapR")
}
```

## Writing/Uploading to REDCap
----------------------------------

Writing data _to_ REDCap is more difficult than reading data _from_ REDCap.
When you read, you receive data in the structure that the REDCap provides you.
You have some control about the columns, rows, and data types,
but there is not a lot you have to be concerned.

In contrast, the structure of the dataset you send to the REDCap server must be precise.
You need to pass special variables so that the REDCap server understands the
hierarchical structure of the data points.

We'll walk through that process, 
but not actually write/upload,
because we'd step on each other's toes using the same REDCap server.

Strategy
----------------------------------

REDCapTidieR makes your life easier when you read 
from a project with longitudinal or repeating structures.
It breaks down the calls for each part and hands you tidy rectangles.

But no package holds your hand for *writing* to REDCap.
You'll need to create a tidy grain for each rectangle/data.frame,
and upload each in a separate call.

As described in the [Retrieving Longitudinal and Repeating Structures](https://ouhscbbmc.github.io/REDCapR/articles/longitudinal-and-repeating.html) vignette,
the best way to read and write data from projects with longitudinal/repeating elements
is to break up the "block matrix" dataset into individual datasets.
Each rectangle should have a coherent grain.

Following this strategy, we'll write to the REDCap server in two distinct steps:

1. Upload the patient-level instrument(s)
1. Upload the each repeating instrument separately.

The actual upload phase is pretty straight-forward
--it's just a call to `REDCapR::redcap_write()`.
Most of the vignette's code prepares the dataset so that the upload will run smoothly.
